" Inspired from Tarik Graba's .vimrc and from Tyler Cipriani's.
" Tyler Cipriani's can be found at
" https://github.com/thcipriani/dotfiles/blob/master/vimrc


" Pathogen -------------------------------------------------------- {{{
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
" " }}}
" Basic options --------------------------------------------------- {{{
let mapleader=","
set nocompatible
set t_Co=256             " My terminal's got all those colors, yo

set title                " Change the terminal title
set encoding=utf-8       " Show utf-8 chars
set showcmd              " count highlighted
set ruler                " Show where I am in the command area
set colorcolumn=80      " vertical ruler at 80 characters
set textwidth=80         " Automatic word wrapping at 80 characters
set formatoptions+=t     " TODO WHAT IS THAT???
set listchars=nbsp:.     " Add non breaking space to list
set showmode             " -- INSERT (appreciation)-- :)
set laststatus=2         " always show the status line
                         " ↪ (0 = never, 1 = default [multi-window only])

set modelines=0          " Don't read first/last lines of file for settings
set hidden               " Stash unwritten files in buffer
set vb                   " Don't beep at me
set cursorline           " Highlight current line
set scrolloff=3          " Start scrolling when I'm 3 lines from top/bottom
set history=1000         " Remember commands and search history
set backspace=2          " Backspace over indent, eol, and insert
set mousehide            " Hide the mouse pointer while typing
set mouse=nvc            " Activate mouse support in all mode except insertion

set number               " Show line numbers
set nowrap               " Turn off line wrap
set tabstop=4            " 4 spaces
set shiftwidth=4         " 4 spaces
set softtabstop=4        " 4 spaces
set expandtab            " Expand tabs to spaces

set hlsearch             " highlight my search
set incsearch            " incremental search
set wrapscan             " Set the search scan to wrap around the file
set ignorecase           " when searching
set smartcase            " …unless I use an uppercase character

set t_vb=                " Stop the screen from blinking in case of action
                         " couldn't be made
set showmatch            " show matching brackets
set mat=2

syntax on                " Syntax highlighting
syntax sync minlines=256 " Makes big files slow
set synmaxcol=2048       " Also long lines are slow
set autoindent           " try your darndest to keep my indentation
set smartindent          " Be smarter about indenting dummy

filetype plugin on
filetype indent on

set fileformats=unix,dos,mac

autocmd BufWritePre * :%s/\s\+$//e " Erase endline spaces
" set undodir^=~/.vim/undo/ " Places .un~ files in the correct directory

" }}}
" Colorscheme ----------------------------------------------------- {{{
" https://github.com/altercation/vim-colors-solarized
set background=dark

" Solarized options
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_termcolors=16
let g:solarized_hitrail=1
colorscheme solarized

let g:syntastic_c_checkers=['make']
set foldmethod=marker
au BufWinEnter * let w:m1=matchadd('ErrorMsg', '\%>110v.\+', -1)
" }}}
" Version 7.3 (703) ----------------------------------------------- {{{
if v:version >= 703
        set colorcolumn=80
        set undodir=~/.vim-undo
        set undofile
        set undolevels=1000  " Max number of changes that can be undone
        set undoreload=10000 " Max number lines to save for undo on buffer
                             "  reload

        " Toggle line numbers in normal mode, set by default
        set relativenumber
        function! NumberToggle()
                if(&relativenumber == 1)
                        set number
                else
                        set relativenumber
                endif
        endfunc

        nnoremap <leader>n :call NumberToggle()<CR>
endif
" }}}
" Dumb osx -------------------------------------------------------- {{{
if has("unix")
 let s:uname = system("uname")
 if s:uname == "Darwin\n"
   set clipboard=unnamed
 endif
endif
" }}}
" Convenient Mapping ---------------------------------------------- {{{
" Make regex sane
noremap / /\v

" Dumb escape
inoremap JJ <ESC>
vnoremap JJ <ESC>
" un-highlight search results
noremap <leader><space> :noh<CR>

" Shortcut to rapidly toggle `set list`
nnoremap <leader>l :set list!<CR>

" Normal/Visual tab for bracket pairs
nnoremap <tab> %
vnoremap <tab> %

" Opens a vertical split and switches over (,v)
nnoremap <leader>v <C-w>v<C-w>l

" Moves around split windows
nnoremap <leader>w <C-w><C-w>

"Moves around tabs
nnoremap <leader>t <Esc>:tabnew<CR>

" Real Returns
nnoremap <leader>R :%s/\r/\r/g<CR>

" Replace <TAB> by four spaces
nnoremap <leader>T :%s/\t/    /g<CR>

" show tabs
nnoremap <leader>t /\t<CR>

" When copying a patch remove all space before a +
" noremap <leader>p :%s/\s\+\ +/+/b<CR>

" Search for git merge
noremap <leader>m /v\=\=\=\=\=<CR>

" Moving around windows
map <C-j> <C-W>j
map <A-S-Down> <C-W>j

map <C-k> <C-W>k
map <A-S-Up> <C-W>k

map <C-h> <C-W>h
map <A-S-Left> <C-W>h

map <C-l> <C-W>l
map <A-S-Right> <C-W>l
" }}}
" Status line ----------------------------------------------------- {{{
" augroup ft_statuslinecolor
"         au!
"         au InsertEnter * hi StatusLine ctermfg=196 guifg=#FF3145
"         au InsertLeave * hi StatusLine ctermfg=130 guifg=#CD5907
" augroup END
" set statusline=%f  " Path.
" set statusline+=%m " Modified flag.
" set statusline+=%r " Readonly flag.
" set statusline+=%w " Preview window flag.
" set statusline+=\  "Space.
" set statusline+=%= " Right align.
"
" " Line and column position and counts.
" set statusline+=\ (line\ %l\/%L,\ col\ %03c)
" }}}
" NERDTree Settings------------------------------------------------ {{{
"map <leader>t :NERDTreeToggle<CR>
"noremap <leader>r:NERDTreeTabsToggle<CR>
" }}}
" Omni-completion ------------------------------------------------- {{{
set ofu=syntaxcomplete#Complete
set tags+=~/.vim/tags/cpp
" set tags+=~/.vim/tags/llvm
" set tags+=~/.vim/tags/glib
" set tags+=~/.vim/tags/llvm
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1      " autocomplete after .
let OmniCpp_MayCompleteArrow = 1    " autocomplete after ->
let OmniCpp_MayCompleteScope = 1    " autocomplete after ::

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" Sweet zsh-like autocompletion menu
set wildmenu
set wildmode=longest:full
" }}}
" LaTeX options --------------------------------------------------- {{{
if has("gui_macvim")
        let g:Tex_ViewRule_pdf = 'Preview'
endif

set shellslash
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
set background=dark
" }}}
" tskeleton options ----------------------------------------------- {{{
let g:tskelUserName = 'Hubert Lefevre'
let g:tskelUserCompany = 'Netatmo'
let g:tskelUserEmail = 'hubelefevre@gmail.com'
let g:tskelDateFormat = '%Y'

autocmd BufNewFile *.h     TSkeletonSetup template.h
autocmd BufNewFile *.c     TSkeletonSetup template.c
autocmd BufNewFile *.java  TSkeletonSetup template.java
autocmd BufNewFile *.scala TSkeletonSetup template.scala
" }}}
" Spellchecker ---------------------------------------------------- {{{
set spell spelllang=en_us
" }}}
" VIM airline ---------------------------------------------------- {{{
" Theme
let g:airline_theme="distinguished"
" air-line
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
" }}}
" Indent guide --------------------------------------------------- {{{
set ts=4 sw=4 et
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=black
" hi IndentGuidesEven ctermbg=black Leave it background color

noremap <leader>g :IndentGuidesToggle<CR>

" }}}
" Rainbow parentheses --------------------------------------------- {{{
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16

let g:rbpt_loadcmd_toggle = 0

" au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

noremap <leader>p :RainbowParenthesesToggle<CR>
" }}}
