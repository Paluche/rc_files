# My .zshrc by Hubert Lefevre
# Some by Matt Blissey http://matt.blissett.me.uk/linux/zsh/zshrc
# Some by Alexis Polti
# Git prompt by Sebastian Celis (sebastiancelis.com) reviewed by Hubert Lefevre
# Battery prompt by Hubert Lefevre

# Use hard limits, except for a smaller stack and no core dumps
unlimit
limit stack 8192
limit core 0
limit -s

# Color table
##############################################################################
# Font color
# 16 color terminals
fg_black=%F{000}
fg_red=%F{001}
fg_green=%F{002}
fg_lbrown=%F{003}
fg_blue=%F{004}
fg_dbrown=%F{005}
fg_lblue=%F{006}
fg_lgrey=%F{007}
fg_grey=%F{008}
fg_lred=%F{009}
fg_lgreen=%F{010}
fg_yellow=%F{011}
fg_dblue=%F{012}
fg_lbrown=%F{013}
fg_llblue=%F{014}
fg_white=%F{015}
fg_black2=%F{016}
# 256 color bonus
fg_orange=%F{208}
fg_purple=%F{164}
fg_pink=%F{212}
fg_2grey=%F{248}

# Attributes
at_normal=%{$'\e[0m'%}
at_bold=%{$'\e[1m'%}
at_italics=%{$'\e[3m'%}
at_underl=%{$'\e[4m'%}
at_blink=%{$'\e[5m'%}
at_outline=%{$'\e[6m'%}
at_reverse=%{$'\e[7m'%}
at_nondisp=%{$'\e[8m'%}
at_strike=%{$'\e[9m'%}
at_boldoff=%{$'\e[22m'%}
at_italicsoff=%{$'\e[23m'%}
at_underloff=%{$'\e[24m'%}
at_blinkoff=%{$'\e[25m'%}
at_reverseoff=%{$'\e[27m'%}
at_strikeoff=%{$'\e[29m'%}

# ls colors
autoload colors; colors;
export LSCOLORS="Gxfxcxdxbxegedabagacad"

# Enable ls colors
if [ "$DISABLE_LS_COLORS" != "true" ]
then
    # Find the option for using colors in ls, depending on the version: Linux or BSD
    if [[ "$(uname -s)" == "NetBSD" ]]; then
        # On NetBSD, test if "gls" (GNU ls) is installed (this one supports colors);
        # otherwise, leave ls as is, because NetBSD's ls doesn't support -G
        gls --color -d . &>/dev/null 2>&1 && alias ls='gls --color=tty'
    elif [[ "$(uname -s)" == "OpenBSD" ]]; then
        # On OpenBSD, test if "colorls" is installed (this one supports colors);
        # otherwise, leave ls as is, because OpenBSD's ls doesn't support -G
        colorls -G -d . &>/dev/null 2>&1 && alias ls='colorls -G'
    else
        ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=tty' || alias ls='ls -G'
    fi
fi

# Completion
##############################################################################
autoload -U compinit
compinit
# case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# for cd, don't try username completions (~polti)
zstyle ':completion:*:cd:*' tag-order local-directories path-directories

# Completion in rm, mv, cp
zstyle ':completion:*:rm:*' ignore-line yes
zstyle ':completion:*:mv:*' ignore-line yes
zstyle ':completion:*:cp:*' ignore-line yes
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# Completion selection by menu for kill
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

# Menu select
zstyle ':completion:*' menu select

# Aliases
##############################################################################
alias ssh='ssh -X'                 # Automatic graphic interface with ssh
alias more=less -R                 # For old people
alias l="ls -AFhl -g"              # Shortcut
alias ll='ls -lh'                  # Shortcut
alias lll='ls -lh | less -R'       # Shortcut
alias grep='grep --colour'         # Colors!!
alias grepg='grep -rni'            # Recursive, line number and case insensitive
alias tree='tree -C'               # Colors!!
alias la='ls -a'                   # Shorcut
alias ms='ls'                      # Fast Finger Rerouting
alias sl='ls'                      # Fast Finger Rerouting
alias rm='nocorrect rm -r'         # Recursive remove automatic
alias mv='nocorrect mv -i'         # no spelling correction on mv
alias make='nocorrect make'        # no spelling correction on make
alias locate='nocorrect locate -i' # no spelling correction on locate
                                   # case insensitive.
#alias find='nocorrect find -name'  # no spelling correction on find, find by name.
alias mkdir='nocorrect mkdir -p'   # no spelling correction on mkdir
alias cp='cp -r'
alias py='ipython3'
alias gnome-control-center='env XDG_CURRENT_DESKTOP=GNOME gnome-control-center'
alias control-center='env XDG_CURRENT_DESKTOP=GNOME gnome-control-center&'


# git aliases
alias gs='git_status'
alias gf='git fetch'                         # Shortcut
alias ga='git add'                           # Shortcut
alias gap='git add -p'                       # Shortcut
alias gc='git commit'                        # Shortcut
alias gca='git commit -a'                    # Shortcut
alias gcaam='git commit -a --amend'          # Shortcut
alias gcam='git commit --amend'              # Shortcut
alias gcf='git commit --fixup'               # Shortcut
alias gch='git checkout --quiet --progress'  # Shortcut
alias gd='git diff -w --ignore-blank-lines'  # Shortcut / ignore space diff
alias gdc='git diff --cached'                # Shortcut
alias gbl='git blame-log'                    # Shortcut
alias gl='git l'                             # Custom log
alias gll='git log -n 1'                     # Shortcut
alias glp='git log-path'                     # Custom log when using path
alias gls='git ls'                           # Custom log with stat option
alias gph='git_push'                         # Shortcut
alias gpl='git pull'                         # Shortcut
alias gra='git rebase --abort'               # Shortcut
alias grc='git rebase --continue'            # Shortcut
alias gre='git rebase'                       # Shortcut
alias grh='git reset HEAD'                   # Shortcut
alias grp='git reset -p'                     # Shortcut
alias gr='git reset -q'                      # Quiet shortcut
alias gsh='git show -b --ignore-blank-lines' # Shortcut / ignore space diff
alias gss='git show --stat'                  # Shorter diff for git show
alias gsu='git submodule update --recursive --init' # Shortcut
alias gb='/home/hlefevre/autre/git-branch-status/git-branch-status -l'
alias gba='/home/hlefevre/autre/git-branch-status/git-branch-status -a'
alias gbd='git branch -D'


# Keep auto-completion working with the aliases
compdef _git gs=git-status
compdef _git gf=git-fetch
compdef _git ga=git-add
compdef _git gap=git-add
compdef _git gc=git-commit
compdef _git gca=git-commit
compdef _git gcaam=git-commit
compdef _git gcam=git-commit
compdef _git gch=git-checkout
compdef _git gd=git-diff
compdef _git gdc=git-diff
compdef _git gl=git-log
compdef _git gll=git-log
compdef _git gls=git-ls
compdef _git gph=git-push
compdef _git gpl=git-pull
compdef _git gra=git-rebase
compdef _git grc=git-rebase
compdef _git gre=git-rebase
compdef _git grh=git-reset
compdef _git grp=git-reset
compdef _git gr=git-reset
compdef _git gsh=git-show
compdef _git gss=git-show
compdef _git gsu=git-submodule-update
compdef _git gre=git-rebase
compdef _git gbd=git-branch

function git_home()
{
    if [ -n "$__GIT_TOP_LEVEL" ]
    then
        cd $__GIT_TOP_LEVEL
    else
        echo -e "\e[31mNot in a repository"
    fi
}

function vimgit()
{
    if [ -n "$__GIT_TOP_LEVEL" ]
    then
        vim $__GIT_TOP_LEVEL/$1 $2
    else
        vim $1 $2
    fi
}


function git_patch()
{
    git commit -a -m PATCH
    if [ $? -eq 0 ]
    then
        git format-patch HEAD~
        git reset HEAD~
    fi
}

function git_blame()
{
    ruby ~/.script/git_blame.rb $1 | less -R
}

function gsf()
{
    cd $__GIT_TOP_LEVEL
    echo "Enterning '$__GIT_NAME'"
    git_status
    git submodule foreach 'zsh /home/hlefevre/.zsh/functions/git_status'
}

function git_diff_origin()
{
    if [ -n "$__GIT_BRANCH_NAME" ]
    then
        git diff origin/$__GIT_BRANCH_NAME $@
    fi
}

function gbf()
{
    /home/hlefevre/autre/git-branch-status/git-branch-status -l

    echo ""

    git submodule foreach "/home/hlefevre/autre/git-branch-status/git-branch-status -l && echo "
}

function gcfp()
{
    git commit --fixup `git log -n 1 --pretty=format:%H $1`
}

function gacfp()
{
    git add $1
    gcfp $1
}

function git_locate()
{
    if [ -n "$__GIT_TOP_LEVEL" ]
    then
        locate $1 | grep $__GIT_TOP_LEVEL
    else
        echo -e "\e[31mNot in a repository"
    fi
}

function git_find()
{
    if [ -n "$__GIT_TOP_LEVEL" ]
    then
        find $__GIT_TOP_LEVEL -name $1
    else
        echo -e "\e[31mNot in a repository"
    fi
}


# Editors on shell
alias pico='nano -mw'
alias nano='nano -mw'

# Auto launch
alias -s html='firefox'

# For vim auto launches
compdef _git gre=git-rebase
alias -s c='vim'
alias -s h='vim'
alias -s o='vim'
alias -s md='vim'
alias -s cpp='vim'
alias -s hpp='vim'
alias -s vim='vim'
alias -s mk='vim'
alias -s txt='vim'
alias -s md='vim'
alias -s mkd='vim'
alias -s markdown='vim'
alias -s lua='vim'
alias -s java='vim'
alias -s aidl='vim'
alias -s tex='vim'
alias -s xml='vim'
alias -s iadl='vim'
alias -s scala='vim'
alias -s php='vim'
alias -s ld='vim'
alias -s d='vim'
alias -s yml='vim'
alias -s in='vim'
alias -s json='vim'

# emacs auto launches
alias -s sv='emacs'
alias -s v='emacs'

# other auto launches
alias -s mkv='vlc'
alias -s pdf='evince'
alias -s odt='lowriter'
alias -s odp='loimpress'
alias -s ods='localc'
alias -s xls='localc'
alias -s py='python3'
alias -s sh='bash'
alias -s rb='ruby'

alias test='cd ./test'

# Other
alias today='grep -r `date +"%m/%d"` /usr/share/calendar'
alias weather='curl http://wttr.in/paris'
alias apt-get='sudo apt-get'
alias aptitude='sudo aptitude'
alias j='jobs'
# color
alias diff='colordiff'
alias less='less -R'
# Global aliases (expand whatever their position)
# e.g. find . E L
alias -g G='| grep'
alias -g L='| less -R'
alias -g H='| head'
alias -g S='| sort'
alias -g T='| tail'
# lock screen using xscreensaver
alias lock='xscreensaver-command -lock'

# Make alias
export NBPROCS=`nproc`
alias jmake='make -j$NBPROCS'

# Set Options
##############################################################################
# keep quiet
unsetopt beep
unsetopt hist_beep
unsetopt list_beep

#setopt correct
setopt autocd                      # Typing cd every time is boring
setopt auto_pushd pushd_minus      # don't use cd, use pushd
setopt pushd_silent pushd_to_home
setopt pushd_ignore_dups
setopt prompt_percent
setopt prompt_subst                # allow function for prompt
setopt rm_star_wait                # Don't do anything stupid Like delete all
setopt chase_links                 # converts links to real path
setopt noclobber                   # don't allow > to clobber files
setopt complete_aliases
setopt extended_glob
setopt no_flow_control
setopt list_types
setopt mark_dirs
setopt path_dirs
setopt auto_remove_slash
setopt rm_star_wait                # rm * waits 10 seconds
setopt multios                     # allow multiple redirection echo 'a'>b>c
setopt bang_hist                   # allow ! for accessing history
setopt nohup                       # don't hup running jobs on logout.
unsetopt share_history             # Share history between multiple shells
setopt hist_ignore_dups            # If I type cd and then cd again, only save
                                   # the last one
setopt hist_ignore_all_dups        # Even if there are commands inbetween
                                   # commands that are the same, still only
                                   # save the last one
setopt hist_ignore_space           # If a line starts with a space, don't save
                                   # it.
setopt hist_no_store
#setopt EXTENDED_HISTORY           # Save the time and how long a command ran
setopt hist_save_no_dups
setopt hist_expire_dups_first
setopt hist_find_no_dups

# Bind Key
##############################################################################
# Emacs key
bindkey -e
# Input control
bindkey '^[[1;5D' backward-word    # Ctrl + LEFT
bindkey '^[[1;5C' forward-word     # Ctrl + RIGHT
bindkey '\e[1~' beginning-of-line  # Debut
bindkey '\e[4~' end-of-line        # fin

# Prompt
##############################################################################
# Autoload zsh functions.
fpath=(~/.zsh/functions $fpath)
autoload -U ~/.zsh/functions/*(:t)
autoload -U promptinit

# Need git in English
export LANGUAGE='en_US.UTF-8 git'

# Enable auto-execution of functions.
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

# Append git functions needed for prompt.
preexec_functions+='preexec_update_git_vars'
precmd_functions+='precmd_update_git_vars'
chpwd_functions+='chpwd_update_git_vars'

# Append battery functions needed for prompt
preexec_functions+='preexec_update_battery_vars'
precmd_functions+='precmd_update_battery_vars'
chpwd_functions+='chpwd_update_battery_vars'

# Reset prompt and right prompt
export PROMPT
export RPROMPT

# The prompt
function setprompt()
{
    local -a infoline llines rlines
    local i_width i_filler filler

    # Introduce the prompt with some design.
    infoline=( "%{$fg[cyan]%}┏━┫" )

    # User informations.
    infoline+=( "%{$fg[green]%}%n%{$fg[cyan]%}@" )

    if [ -n "$SSH_CLIENT" ]
    then
        infoline+=( "${fg_red}%m" )
    else
        infoline+=( "${fg_blue}%m" )
    fi

    # Display time.
    infoline+=( "%{$fg[cyan]%}┣━┫${fg_white}%T" )

    # Display the numbers of jobs suspended or running in background.
    infoline+=( "%(1j.%{$fg[cyan]%}┣━┫${fg_orange}%j.)" )

    # Display battery info if your computer has a battery.
    infoline+=( "$(prompt_battery_info)" )

    # Display git info.
    infoline+=( "$(prompt_git_info)" )
    infoline+=( "$fg[cyan]%}┃" )

    # Append the different parts of the upper line of the prompt.
    llines=${(j::)infoline}

    # Finish the design of the prompt.
    # Display a green arrow that turns red if the return code of the last
    # function is different of zero.
    llines+=( "%{$fg[cyan]%}┗┉%(?:%{$fg[green]%}:%{$fg[red]%})${at_normal} " )

    rlines="${at_bold}${fg_orange}%~/ ${at_normal}"

    PROMPT=${(F)llines}
    RPROMPT=${(F)rlines}
}

precmd_functions+='setprompt'

case $TERM in
    (*xterm* | rxvt-unicode-256color)
        # Write some info to terminal title.
        # This is seen when the shell prompts for input.
        function precmd_settitle
        {
            if [ -n "$SSH_CLIENT" ]
            then
                print -Pn "\e]0;zsh %n@%m: %d\a"
            else
                print -Pn "\e]0;zsh: %d\a"
            fi
        }

        # This is seen when the shell runs a command
        function preexec_settitle
        {
            if [ -n "$SSH_CLIENT" ]
            then
                printf "\033]0;zsh %s@%s: %s - %s\a" "$USERNAME" "$HOST" "$PWD" "$1"
            else
                printf "\033]0;zsh: %s - %s\a" "$PWD" "$1"
            fi
        }

        precmd_functions+='precmd_settitle'
        preexec_functions+='preexec_settitle'

        ;;
esac

# Historic
##############################################################################
export HISTSIZE=2000
export HISTFILE="$HOME/.history"
export SAVEHIST=$HISTSIZE
#Say how long a command took, if it took more than 30 seconds
export REPORTTIME=30

# Watch other user login/out
watch=notme
export LOGCHECK=60



# Format titles for screen and rxvt
#precmd () {print -Pn "\e]2;%n@%m%#  %~ %l  %w :: %T\a"}
#preexec () {print -Pn "\e]2;%n@%m%#  <$1>  %~ %l  %w :: %T\a"}

# Misc settings
export EDITOR="vim"

# functions
##############################################################################
# extract the files
function extract()
{
    if [[ -z "$1" ]]; then
        print -P "usage: \e[1;36mextract\e[1;0m < filename >"
        print -P "       Extract the file specified based on the extension"
    elif [[ -f $1 ]]; then
        case ${(L)1} in
            *.tar.bz2) tar -jxvf  $1;;
            *.tar.gz)  tar -zxvf  $1;;
            *.tar.xz)  tar -Jxvf  $1;;
            *.bz2)     bunzip2    $1;;
            *.gz)      gunzip     $1;;
            *.jar)     unzip      $1;;
            *.rar)     unrar x    $1;;
            *.tar)     tar -xvf   $1;;
            *.tbz2)    tar -jxvf  $1;;
            *.tgz)     tar -zxvf  $1;;
            *.zip)     unzip      $1;;
            *.Z)       uncompress $1;;
            *.7z)      7z x       $1;;
            *)         echo "Unable to extract '$1' :: Unknown extension"
        esac
    else
        echo "File ('$1') does not exist!"
    fi
}

function hexa()
{
    echo " 0 0x0 0000"
    echo " 1 0x1 0001"
    echo " 2 0x2 0010"
    echo " 3 0x3 0011"
    echo " 4 0x4 0100"
    echo " 5 0x5 0101"
    echo " 6 0x6 0110"
    echo " 7 0x7 0111"
    echo " 8 0x8 1000"
    echo " 9 0x9 1001"
    echo "10 0xa 1010"
    echo "11 0xb 1011"
    echo "12 0xc 1100"
    echo "13 0xd 1101"
    echo "14 0xe 1110"
    echo "15 0xf 1111"
}

function adb_logcat()
{
    while :
    do
        adb logcat -v time | python ~/.script/adb_logcat.py $@
    done
}

function adb_shell()
{
    while :
    do
        adb wait-for-device shell
    done
}

function timestamp()
{
    if [ ! $# -eq 1 ]
    then
        echo "usage: timestamp time"
    else
        python ~/.script/timestamp.py $1
    fi
}


function serial_logcat()
{
    echo "\03logcat -v time" > /dev/ttyUSB0
    cat /dev/ttyUSB0 | python ~/.script/adb_logcat.py $@
}

function serial_logcat_dump()
{
    echo "\03logcat -v time" > /dev/ttyUSB0
    cat /dev/ttyUSB0 > ~/dump_logcat.txt
}

function serial_dmesg_dump()
{
    echo "\03su"    > /dev/ttyUSB0
    #echo "dmesg"     > /dev/ttyUSB0
    cat /dev/ttyUSB0 > ~/dump_dmesg.txt
}

alias cortex_log='python ~/.script/cortex_log.py'

function markdown_preview()
{
    rm /tmp/$1.html
    markdown_py $1 > /tmp/$1.html
    firefox /tmp/$1.html
}

function common_init()
{
    if [ -n "$SSH_CLIENT" ]
    then
        eval `ssh-agent -s`
    fi
    ssh-add
}

function git_rebase_correct_author()
{
    if [[ -z "$1" ]]
    then
        branch=master
    else
        branch=$1
    fi
    git rebase -x "git commit --amend --author hlefevre@netatmo.com" $branch
}

# Computer's specific configurations
##############################################################################
if [ `hostname` = "paluche-laptop" ]; then
    alias gohubert='cd /media/paluche/OS/Users/Hubert'
    # Lines for compiling and correct usr of openocd
    export PATH=$PATH:/opt/tools_arm/bin/
    export PATH=$PATH:/opt/openocd/bin/
    export PATH=$PATH:/opt/msp430/msp430mcu-20120406/bin/
    export PATH=$PATH:/opt/soclib/utils/bin/
    export PATH=$PATH:/home/paluche/git/rc_files/xflux
    export PATH=$PATH:/opt/android-sdk-linux/platform-tools/
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

    alias openocd="sudo /opt/openocd/bin/openocd"

    # Initialize a session
    init() {
        setxkbmap fr
        common_init
    }

    # SSH host
    users=(hlefevre paluche hubert bar)
    hosts=(paluche-laptop)

elif [ `hostname` = "dell-hlefevre" ]; then
    # Initialize a session
    init() {
        common_init
        setxkbmap -option "nbsp:none"
    }
    # Netatmo shortcut
    export PATH=$PATH:~/netatmo/generic/stm32_sbm
    #export PATH=$PATH:/opt/jdk1.7.0_67/bin
    #export PATH=$PATH:/opt/jdk1.7.0_67/lib
    export PATH=$PATH:/home/hlefevre/autre/rc_files/xflux
    export PATH=$PATH:/opt/android-studio/bin
    export PATH=$PATH:/home/hlefevre/netatmo/embedded/Android/Camera/build/toolchain/android_standalone/bin/
    #export JAVA_HOME=/opt/jdk1.7.0_67
    export ANDROID_HOME=/opt/Android/Sdk
    # export PATH=$PATH:/opt/jdk1.6.0_45/bin
    # export PATH=$PATH:/opt/jdk1.6.0_45/lib
    # ~/netatmo/apps/Linux/flasher
    # App shortcuts
    alias flash-run='stm32_sbm -f app-jtag.bin'
    alias fw-flash-run='stm32_sbm -f app.bin -s 0x1000'
    alias catftdi='cat /dev/ttyUSB0'
    alias serialflasher='sudo ./serialflasher'
    alias flasher='sudo /home/hlefevre/netatmo/apps/Linux/flasher/flasher'
    alias dfu_flash='sudo /home/hlefevre/netatmo/generic/stm32_dfu/stm32_dfu -f='
    # SSH Users and Host
    users=(hlefevre hubert paluche)
    hosts=(devatmo democes1 vm1-inte.corp.netatmo.com vm3-inte.corp.netatmo.com)

fi

# SSH Completion
zstyle ':completion:*' users $users
zstyle ':completion:*:hosts' hosts $hosts
